<Project ToolsVersion="15.0">

  <Import Project="PlatformItemGroups.props" />

  <PropertyGroup>
	<Product>$(AssemblyName) ($(TargetFramework))</Product>
	<DefaultLanguage>en-US</DefaultLanguage>

	<!-- Version management is now done through NuGet, this avoids issues related version mismatch -->
	<Version>255.255.255.255</Version>

	<NoWarn>$(NoWarn),1998,4014,VSX1000,NU1701</NoWarn>
	<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
	<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
	<RepositoryUrl>$(BUILD_REPOSITORY_URI)</RepositoryUrl>
	<Copyright>nventive</Copyright>
	<Author>nventive</Author>

	<LangVersion>7.3</LangVersion>
	<WarningsAsErrors>all</WarningsAsErrors>

  </PropertyGroup>

  <!---->

  <Target Name="SetNoWarn"
				  BeforeTargets="Build"
				  Condition=" '$(TargetFramework)' == 'net461' ">

	<!--
		This target is the equivalent to this property group, until this
		is fixed: https://github.com/NuGet/Home/issues/6662
		<PropertyGroup Condition=" '$(TargetFramework)' == 'net461' ">
			<NoWarn>$(NoWarn);67</NoWarn>
		</PropertyGroup>
		-->

	<CreateProperty Value="$(NoWarn);67">
	  <Output
			  TaskParameter="Value"
			  PropertyName="NoWarn" />
	</CreateProperty>
  </Target>


  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
	<DefineConstants>$(DefineConstants);__WASM__;HAS_EXPENSIVE_TRYFINALLY</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsXamarinIOS)">
	<DefineConstants>$(DefineConstants);IOS1_0;XAMARIN;XAMARIN_IOS;XAMARIN_IOS_UNIFIED</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsMonoAndroid)">
	<DefineConstants>$(DefineConstants);XAMARIN;XAMARIN_ANDROID</DefineConstants>
	<AndroidUseIntermediateDesignerFile>True</AndroidUseIntermediateDesignerFile>
	<AndroidResgenFile>obj\$(TargetFramework)\Resources\Resource.Designer.cs</AndroidResgenFile>
	<OutputPath>bin\$(Configuration)\$(TargetFramework)\</OutputPath>
	<IntermediateOutputPath>$(BaseIntermediateOutputPath)$(Configuration)\$(TargetFramework)\</IntermediateOutputPath>
	<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'uap10.0' ">
	<TargetPlatformVersion>10.0.17763.0</TargetPlatformVersion>
	<TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
	<DefineConstants>$(DefineConstants);NETFX_CORE</DefineConstants>

	<!-- Ensures the .xr.xml files are generated in a proper layout folder -->
	<GenerateLibraryLayout>true</GenerateLibraryLayout>
  </PropertyGroup>

  <ItemGroup>
	<PackageReference Include="xamarin.build.download" />
  </ItemGroup>

  <ItemGroup Condition=" $(IsMonoAndroid) or $(IsXamarinIOS) ">
	<!-- remove files included by msbuild extras -->
	<Page Remove="@(Page)" />
	<Page Include="**\*.xaml" Exclude="bin\**\*.xaml;obj\**\*.xaml" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'uap10.0' ">
	<PackageReference Include="Microsoft.NETCore.UniversalWindowsPlatform " Version="5.4.2" />
  </ItemGroup>

  <Target Name="GetBuiltProjectOutputRecursive" Condition=" '$(TargetFramework)' == 'xamarinios10' " />

  <Target Name="_DisplayTargets" BeforeTargets="BeforeBuild">
	<Message Text="Building target framework: $(TargetFramework)" Importance="high" Condition="'$(TargetFramework)'!=''" />
  </Target>

  <Target Name="_UnoOverrideNuget"
		AfterTargets="AfterBuild"
		DependsOnTargets="BuiltProjectOutputGroup"
		Condition="'$(UnoNugetOverrideVersion)'!=''">

	<PropertyGroup>
	  <_OverrideTargetFramework>$(TargetFramework)</_OverrideTargetFramework>
	  <_TargetNugetFolder>$(USERPROFILE)\.nuget\packages\$(AssemblyName)\$(UnoNugetOverrideVersion)\lib\$(_OverrideTargetFramework)</_TargetNugetFolder>
	  <_TargetNugetRefFolder>$(USERPROFILE)\.nuget\packages\$(AssemblyName)\$(UnoNugetOverrideVersion)\ref\$(_OverrideTargetFramework)</_TargetNugetRefFolder>
	</PropertyGroup>
	<ItemGroup>
	  <_OutputFiles Include="$(TargetDir)\*.*" />
	  <_OutputRefFiles Include="$(TargetDir)\ref\*.*" />
	</ItemGroup>
	<MakeDir Directories="$(_TargetNugetFolder)" />

	<Message Importance="high" Text="OVERRIDING NUGET PACKAGE CACHE: $(_TargetNugetFolder) and $(_TargetNugetRefFolder)" />

	<Copy SourceFiles="@(_OutputFiles)"
		  DestinationFiles="@(_OutputFiles->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
	<Copy SourceFiles="@(_OutputRefFiles)"
		  DestinationFiles="@(_OutputRefFiles->'$(_TargetNugetRefFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

</Project>
