<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Linq;
using System.Drawing;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Input;
using Uno.Disposables;
using System.Runtime.CompilerServices;
using Uno.Extensions;
using Uno.Logging;
using Uno.UI;
using Uno.UI.DataBinding;
using Windows.Foundation;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Media.Animation;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
#if XAMARIN_IOS
using Color = UIKit.UIColor;
using View = UIKit.UIView;
#elif __MACOS__
using Color = AppKit.NSColor;
using View = AppKit.NSView;
#elif XAMARIN_ANDROID
using Color = Android.Resource.Color;
using View = Android.Views.View;
#elif NET46 || __WASM__
using Color = System.Object;
using View = Windows.UI.Xaml.FrameworkElement;
#endif  

<#
foreach(var @namespace in _namespaces) { 
#>

namespace <#= @namespace.Name #>
{
	<# foreach (var @class in @namespace.Classes) { #>

#if <#= @class.Condition #>
    <#= @class.AccessModifier #> partial class <#= @class.Name #>
	{
		<# foreach(var dp in @class.Properties) { #>
		
#if <#= dp.Condition #>
        #region <#= dp.Name #> DependencyProperty

        <#= dp.Modifier #> public <#= dp.PropertyType #> <#= dp.Name #>
        {
            get { return (<#= dp.PropertyType #>)this.GetValue(<#= dp.Name #>Property); }
            set { this.SetValue(<#= dp.Name #>Property, value); }
        }

        public static readonly DependencyProperty <#= dp.Name #>Property =
            DependencyProperty.Register(
                "<#= dp.Name #>",
                typeof(<#= dp.PropertyType #>),
                typeof(<#= @class.Name #>),
                new FrameworkPropertyMetadata(
                    defaultValue: (<#= dp.PropertyType #>)<#= dp.DefaultValue #>,
					options: FrameworkPropertyMetadataOptions.<#= dp.FrameworkPropertyOption #>,
                    propertyChangedCallback: (s, e) => ((<#= @class.Name #>)s)?.On<#= dp.Name #>Changed((<#= dp.PropertyType #>)e.OldValue, (<#= dp.PropertyType #>)e.NewValue)
                )
            );

        protected virtual void On<#= dp.Name #>Changed(<#= dp.PropertyType #> old<#= dp.Name #>, <#= dp.PropertyType #> new<#= dp.Name #>)
        {
            On<#= dp.Name #>ChangedPartial(old<#= dp.Name #>, new<#= dp.Name #>);
            On<#= dp.Name #>ChangedPartialNative(old<#= dp.Name #>, new<#= dp.Name #>);
        }

        partial void On<#= dp.Name #>ChangedPartial(<#= dp.PropertyType #> old<#= dp.Name #>, <#= dp.PropertyType #> new<#= dp.Name #>);
        partial void On<#= dp.Name #>ChangedPartialNative(<#= dp.PropertyType #> old<#= dp.Name #>, <#= dp.PropertyType #> new<#= dp.Name #>);

		#endregion
#endif

		<# } #>
	}

#endif

	<# } #>
}
<#
}
#>

<#+

	List<NamespaceInfo> _namespaces = new List<NamespaceInfo>();

    public class ClassInfo
    {
        public string Name { get; set; } 
        public List<PropertyInfo> Properties { get; set; }
		public string Condition { get; set; }
		public string AccessModifier {get; set; }
    }

    public class NamespaceInfo
    {
        public string Name { get; set; }
        public List<ClassInfo> Classes { get; set; }
    }

    public class PropertyInfo
    {
        public string Name { get; set; }
        public string PropertyType { get; set; }
        public string DefaultValue { get; set; }
		public string Condition { get; set; }
		public string Modifier { get; set; }
		public string FrameworkPropertyOption { get; set; }
    }

    public class NamespacesBuilder
    {
        private List<NamespaceInfo> _namespaces = new List<NamespaceInfo>();

        public NamespacesBuilder()
        {

        }

        public NamespacesBuilder Namespace(string name)
        {
            _namespaces.Add(new NamespaceInfo { Name = name, Classes = new List<ClassInfo>() });
            return this;
        }

        public NamespacesBuilder Class(string name, string condition = "true", string accessModifier = "public")
        {
            _namespaces.Last().Classes.Add(new ClassInfo { Name = name, Properties = new List<PropertyInfo>(), Condition = condition, AccessModifier = accessModifier });
            return this;
        }

        public NamespacesBuilder Property(string name, string type, string defaultValue, string condition = "true", string frameworkPropertyOption = "None")
        {
            _namespaces.Last().Classes.Last().Properties.Add(new PropertyInfo { Name = name, PropertyType = type, DefaultValue = defaultValue, Condition = condition, Modifier = string.Empty, FrameworkPropertyOption = frameworkPropertyOption });
            return this;
        }

        public NamespacesBuilder NewProperty(string name, string type, string defaultValue, string condition = "true", string frameworkPropertyOption = "None")
        {
            _namespaces.Last().Classes.Last().Properties.Add(new PropertyInfo { Name = name, PropertyType = type, DefaultValue = defaultValue, Condition = condition, Modifier = "new", FrameworkPropertyOption = frameworkPropertyOption });
            return this;
        }


        public List<NamespaceInfo> Build() { return _namespaces; }
    }

#>
